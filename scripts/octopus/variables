#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"
basepath=$(dirname $0)
source "${basepath}/utils/ids.sh"

##?
##? Octopus Deploy project variables
##?
#?? 1.0.0
##?
##? Usage:
##?   variables get [--space-name=<space-name>][--project-name=<project-name>]
##?
##? Options:
##?   -p, --project-name=<project-name>  Project name
##?   -s, --space-name=<space-name>      Space name
##?
docs::eval "$@"

if [ -z "$OCTOPUS_INSTANCE" ]; then
  log::error "OCTOPUS_INSTANCE environment variable not set"
  exit 1
fi

args::verify_api_key

if [ "${get}" == "true" ]; then
  space_id=$(octopus::get_space_id "${space_name}")
  if [[ -z ${space_id} ]]; then
    exit -1
  fi
  project_id=$(octopus::get_project_id "${space_id}" "${project_name}")

  persistence=$(http GET "https://${OCTOPUS_INSTANCE}.octopus.app/api/spaces/${space_id}/projects/${project_id}" ApiKey==${API_KEY} | jq -r .PersistenceSettings.Type)

  if [[ -n ${project_id} ]]; then
    log::header "Variables in '${space_id}' (${project_id})"
    if [[ "${persistence}" == "VersionControlled" ]]; then
      http GET "https://${OCTOPUS_INSTANCE}.octopus.app/api/spaces/${space_id}/projects/${project_id}/main/variables" \
           ApiKey==${API_KEY} \
        | jq -r '.Variables[] | [.Name, .Value] | @csv' | gum table --print --columns "Name,Value"
    else
      http GET "https://${OCTOPUS_INSTANCE}.octopus.app/api/spaces/${space_id}/projects/${project_id}/variables" \
           ApiKey==${API_KEY} \
        | jq -r '.Variables[] | [.Name, .Value] | @csv' | gum table --print --columns "Name,Value"
    fi
  else
    exit -1
  fi
fi
