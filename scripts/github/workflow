#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

basepath=$(dirname $0)

##?
##? Github workflows management
##?
#?? 1.0.0
##?
##? Usage:
##?   workflow list [--workflow=<workflow>]
##?   workflow run [--workflow=<workflow>][--input=<input>...][--follow]
##?   workflow watch [--workflow=<workflow>]
##?
##? Arguments:
##?   run    Run workflow
##?   watch  Watch workflow run
##?
##? Options:
##?   -i, --input=<input>        Workflow input parameter (key=value format)
##?   -f, --workflow=<workflow>  Workflow name/id
##?   -w, --follow
##?
docs::eval "$@"

function get_workflow(){
  choosen_workflow=$(gh workflow list --json name,id | jq -r '.[] | [(.name + " (" + (.id|tostring) + ")")] | @tsv' | gum choose --header "Workflows...")
  [[ -z ${choosen_workflow} ]] && exit 1
  echo $(echo ${choosen_workflow} | cut -d '(' -f 2 | cut -d ')' -f 1)
}

[[ "${workflow}" == "" ]] && workflow=$(get_workflow)

if [[ "${list}" == "true" ]]; then
  gh workflow view ${workflow}
fi

if [[ "${run}" == "true" ]]; then
  workflow_inputs=""
  for i in "${input[@]}"; do
    workflow_inputs+=" --raw-field ${i}"
  done

  gh workflow run ${workflow} ${workflow_inputs}

  gum spin --title "Waiting for workflow ${workflow}..." -- bash -c "source ${basepath}/utils/functions.sh && wait_for_workflow ${workflow}"

  run_id=$(gh run list --workflow ${workflow} --json databaseId -q '.[0].databaseId')
  if [[ "${follow}" == "true" ]]; then
    gh run watch ${run_id}
  else
    gh run view ${run_id}
  fi
fi

if [[ "${watch}" == "true" ]]; then
  gh run watch $(gh run list --workflow=${workflow} --json databaseId | jq -r .[0].databaseId)
fi
