#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

##?
##? Rrepository actions in Github using gh CLI
##?
#?? 1.0.0
##?
##? Usage:
##?   reposistory clone --name=<name>
##?   reposistory list [--name=<name>][--limit=<limit>]
##?   reposistory teams --name=<name>[--output=<output>]
##?   reposistory templates [--name=<name>]
##?
##? Arguments:
##?   clone     Clone one of the repos containing <name>
##?   list      List repositories of a given organization
##?   teams     List teams permissions of a repo
##?   templates List repository templates
##?
##? Options:
##?   -l, --limit=<limit>    Results limit (ignored when name is provided) [default: 100]
##?   -n, --name=<name>      Repository name
##?   -o, --output=<output>  Output format (table|json) [default: table]
##?
docs::eval "$@"

# Set GITHUB_ORGANIZATION variable to search in your specific organization
organization=${GITHUB_ORGANIZATION:-abelazo}

list_repos() {
  if [ -z "${name}" ]; then
    log::note "Showing all repositories"
    gh repo list ${organization} -L ${limit} --no-archived
  else
    results=$(gh search repos --owner=${organization} -L 1000 --match name ${name} --json name | jq -r .[].name)
    log::note "Showing $(echo ${results} | wc -w) repositories"
    echo ${results} | tr " " "\n" | sort | grep --color ${name}
  fi
}

if [ "${clone}" == "true" ]; then
  results=$(gh search repos --owner=${organization} -L 1000 --match name ${name} --json name)
  repository=$(jq -r '.[].name' <<<${results} | gum filter --header "Repository")
  [[ repository != "" ]] && git clone git@github.com:${organization}/${repository}
fi

if [ "${list}" == "true" ]; then
  list_repos
  exit 0
fi

if [ "${teams}" == "true" ]; then
  log::header "Teams with permissions in ${name}"
  result=$(gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${organization}/${name}/teams)

  if [[ "${output}" == "table" ]]; then
    echo ${result} | jq -r '["Name","Admin", "Maintain", "Push", "Triage", "Pull"], (.[] | [.name, .permissions.admin, .permissions.maintain, .permissions.push, .permissions.triage, .permissions.pull]) | @csv' | gum table --print
  else
    echo ${result} | jq -r '.[] | {"name": .name, "admin": .permissions.admin, "maintain": .permissions.maintain, "push": .permissions.push, "triage": .permissions.triage, "pull": .permissions.pull}'
  fi
  exit 0
fi

if [ "${templates}" == "true" ]; then
  if [ -z "${name}" ]; then
    for repo in $(gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${organization}/repos | jq -r '.[].name'); do
      result=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${organization}/$repo)
      jq -r '{"name": .name, "template": .template_repository.name}' <<<${result}
    done
  else
    result=$(mktemp)
    for repo in $(gh search repos --owner=${organization} -L 1000 --match name ${name} --json name | jq -r .[].name); do
      repo_result=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${organization}/$repo)
      jq -r '[.name, .template_repository.name] | @csv' <<<${repo_result} >> ${result}
    done
    cat ${result} | gum table --columns "REPOSITORY, TEMPLATE" --print
    rm ${result}
  fi
fi
