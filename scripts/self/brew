#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

##? Brew software management
##?
#?? 2.0.0
##?
##? Usage:
##?   brew install [<additional_brew_file>...][--cleanup]
##?   brew upgrade [-y]
##?
##? Commands:
##?   install  Installs all brew formulae present in core and addtional files
##?   upgrade  Updates brew and upgrades all outdated formulae
##?
##? Arguments:
##?   additional_brew_file  Additional Brewfiles to be installed
##?
##? Options:
##?   -c, --cleanup  Forces cleanup of brew installation to match given Brewfiles
##?   -y, --yes      Upgrades all outdated formulae without asking for confirmation
##?
docs::eval "$@"

if [ "${install}" == "true" ]; then

  log::header "Installing  homebrew formulae"
  export HOMEBREW_NO_AUTO_UPDATE=0
  core_brewfile=${DOTFILES_PATH}/os/mac/brew/Brewfile
  log::note "Installing CORE Brewfile: ${core_brewfile}"
  brew bundle --file=${core_brewfile}

  if [ ${#additional_brew_file[@]} -gt 0 ]; then
    for candidate_file in "${additional_brew_file[@]}"; do
      brewfile=$(realpath  ${candidate_file})
      if [ -f ${brewfile} ]; then
        log::note "Installing additional Brewfile: ${brewfile}"
        brew bundle --file=${brewfile}
        log::note "Cleaning up"
        brew cleanup
      fi
    done
  fi

  if [ "${cleanup}" == "true" ]; then
    log::header "Brew bundle cleanup"
    union_brewfile=$(mktemp)

    log::note "Merging input Brewfiles"
    echo "Brewfile ${core_brewfile}"
    cat ${core_brewfile} >> ${union_brewfile}
    if [ ${#additional_brew_file[@]} -gt 0 ]; then
      for candidate_file in "${additional_brew_file[@]}"; do
        brewfile=$(realpath  ${candidate_file})
        echo "Brewfile ${brewfile}"
        if [ -f ${brewfile} ]; then
          cat ${brewfile} >> ${union_brewfile}
        fi
      done
    fi
    log::note "Force cleanup"
    brew bundle --force cleanup --file=${union_brewfile}
    log::note "Cleaning up"
    brew cleanup
    rm ${union_brewfile}
  fi
fi

if [ "${upgrade}" == "true" ]; then
  log::header "Upgrading homebrew formulae"
  brew update &> /dev/null
  log::note "Obtaining outdated formulae"
  outdated=$(brew outdated --quiet)

  [[ -z ${outdated} ]] && exit # No additional installation required

  brew outdated --verbose
  if [ "${_y}" == "true" ]; then
    upgrade_confirmation="y"
  else
    echo -n "Do you want to upgrade outdated formulae [y/N]: "
    read input

    input=$([[ -z ${input} ]] && echo "n" || echo ${input})
    upgrade_confirmation=$(echo ${input} | tr '[:upper:]' '[:lower:]')
  fi

  if [ "${upgrade_confirmation}" == "y" ]; then
    log::note "Upgrading outdated formulae"
    brew upgrade
    log::note "Cleaning up"
    brew cleanup
  fi
fi
