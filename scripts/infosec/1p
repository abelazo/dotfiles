#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

##? Get password from 1password
#?? 3.0.0
##?
##? Usage:
##?   1p list
##?   1p pwd <item> [--stdout]
##?   1p otp <item> [--stdout]
##?   1p gpg <key_id> [--stdout]
##?   1p describe <item>
##?   1p read --vault=<vault> --secret=<secret> --section=<section> --field=<field> [--stdout]
##?
##? Options:
##?   -f, --field=<field>      Secret field
##?   -s, --secret=<secret>    Secret name
##?   -t, --section=<section>  Secret section
##?   -v, --vault=<vault>      Vault where the secret is stored
##?
docs::eval "$@"

if [ "${list}" == "true" ]; then
  op item list --format=json | jq -r '["Item","Vault"], ["----", "-----"], (.[] | [.title, .vault.name]) | @tsv' | column -ts $'\t'
  exit 0
fi

if [ "${otp}" = "true" ]; then
  result=$(op item get "${item}" --field type=otp --format json | jq -r .totp)
elif [ "${gpg}" = "true" ]; then
  gpgKeyId=$(op item list --tags GPG --format=json | jq -r '.[] | select(.title | test("'${key_id}'")).id')

  [[ -z ${gpgKeyId} ]] && log::error "Could not find a GPG key identified by ${item}" && exit 1
  [[ $(echo ${gpgKeyId} | wc -c) -gt 27 ]] && log::error "Could not find a UNIQUE GPG key identified by ${item}" && exit 2

  result=$(op item get "${gpgKeyId}" --fields label=password --format json | jq -r .value)
elif [ "${pwd}" = "true" ]; then
  result=$(op item get "${item}" --fields label=password --format json | jq -r .value)
elif [ "${describe}" = "true" ]; then
  op item get "${item}"
elif [ "${read}" = "true" ]; then
  result=$(op read "op://${vault}/${secret}/${section}/${field}")
fi

if [ "${stdout}" = "true" ]; then
  echo ${result}
else
  echo -n ${result} | pbcopy
fi
