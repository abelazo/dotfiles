#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

##?
##? Get AWS logs
##?
#?? 1.0.0
##?
##? Usage:
##?   ecs deployments [--cluster=<cluster>][--service=<service>][--output=<output>]
##?   ecs task-definition [--definition=<definition>]
##?
##? Options:
##?   -c, --cluster=<cluster>        ECS cluster
##?   -d, --definition=<definition>  ECS Task Definition
##?   -s, --service=<service>        ECS service
##?   -o, --output=<output>          Output format (json or text) [default:json]
##?
docs::eval "$@"

if [[ "${deployments}" == "true" ]]; then
  cluster=$(aws ecs list-clusters | jq -r '.clusterArns[]' | gum filter --select-if-one --value "${cluster}" --header "ECS cluster ARN...")
  service=$(aws ecs list-services --cluster ${cluster} | jq -r '.serviceArns[]' | gum filter --select-if-one --value "${service}" --header "ECS service ARNs...")

  deployments=$(aws ecs describe-services --cluster ${cluster} --service ${service} | jq -r .services[].deployments)

  if [[ "${output}" == "text" ]]; then
    jq -r '.[] | [.status, .rolloutState, .taskDefinition] | @csv' <<<${deployments} | gum table --print --columns "Status,Rollout state,ECS task"
  else
    jq . <<<${deployments}
  fi
fi

if [[ "${task_definition}" == "true" ]]; then
  definition=$(aws ecs list-task-definitions | jq -r '.taskDefinitionArns[]' | gum filter --select-if-one --value "${definition}" --header "ECS task definition...")

  aws ecs describe-task-definition --task-definition ${definition} | jq .
fi
